rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is a super_admin
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.basicInfo.userType == 'super_admin';
    }

    // Helper function to check if the user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Admins can read/write any user document.
      // Users can read and write their own document.
      allow read, write: if isSuperAdmin() || request.auth.uid == userId;
    }

    // =================================
    // Events Collection
    // =================================
    match /events/{eventId} {
      // Anyone can read an approved event. Admins can read any event.
      allow get: if resource.data.status == 'approved' || isSuperAdmin();
      allow list: if isSuperAdmin(); // Only admins can list all events regardless of status

      // Authenticated users can create events. Admins can also create.
      allow create: if isSignedIn() || isSuperAdmin();
      
      // Only the event organizer or an admin can update an event.
      allow update: if isSuperAdmin() || resource.data.organizerId == request.auth.uid;
      
      // Only admins can delete events.
      allow delete: if isSuperAdmin();

      // Ticket Tiers Subcollection
      match /ticketTiers/{tierId} {
        // Anyone can read ticket tiers for an approved event. Admins can read any.
        allow get, list: if get(/databases/$(database)/documents/events/$(eventId)).data.status == 'approved' || isSuperAdmin();

        // Only the event organizer or an admin can create/update/delete tiers.
        allow write: if isSuperAdmin() || get(/databases/$(database)/documents/events/$(eventId)).data.organizerId == request.auth.uid;
      }
    }

    // =================================
    // Tickets Collection
    // =================================
    match /tickets/{ticketId} {
        // A user can read/write their own ticket. Admins can manage any ticket.
        allow read, write: if isSuperAdmin() || resource.data.userId == request.auth.uid;
        // Authenticated users need to be able to create their own tickets during checkout
        allow create: if isSignedIn();
    }
    
    // =================================
    // Transactions Collection
    // =================================
     match /transactions/{transactionId} {
        // A user can read their own transaction. Admins can read any.
        allow get: if isSuperAdmin() || resource.data.userId == request.auth.uid;
        // Only admins should be able to list all transactions
        allow list: if isSuperAdmin();
        // Authenticated users can create transactions (i.e., make a purchase)
        allow create: if isSignedIn();
        // Transactions should be immutable
        allow update, delete: if false;
    }
    
    // =================================
    // Support Tickets Collection
    // =================================
    match /supportTickets/{ticketId} {
      // User can read their own ticket. Admins can read any ticket.
      allow get: if isSuperAdmin() || resource.data.userId == request.auth.uid;
      allow list: if isSuperAdmin(); // Only admins can list all support tickets
      
      // Admins can update any ticket.
      allow update: if isSuperAdmin();
      
      // Any signed-in user can create a support ticket.
      allow create: if isSignedIn();
      
      // Only admins can delete tickets.
      allow delete: if isSuperAdmin();
    }
    
     // =================================
    // Payouts Collection (Admin-only)
    // =================================
    match /payouts/{payoutId} {
        // Only admins can read or write to the payouts collection.
        allow read, write: if isSuperAdmin();
    }
  }
}
