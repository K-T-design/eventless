
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Users Collection
    // - A user can read their own profile.
    // - A user can create their own profile.
    // - A user can only update their own profile, but cannot change their userType.
    match /users/{userId} {
      allow read, update: if isOwner(userId) && !('userType' in request.resource.data.basicInfo);
      allow create: if isOwner(userId);
    }
    
    // Events Collection
    // - Anyone can read approved events.
    // - Logged-in users can create events, setting themselves as the organizer.
    match /events/{eventId} {
       allow read: if resource.data.status == 'approved';
       allow create: if request.auth != null && request.resource.data.organizerId == request.auth.uid;
       
       // Ticket Tiers Subcollection
       // - Anyone can read ticket tiers for an approved event.
       match /ticketTiers/{tierId} {
         allow read: if get(/databases/$(database)/documents/events/$(eventId)).data.status == 'approved';
       }
    }

    // Tickets Collection
    // - A user can only read their own ticket.
    // - A user can query for the list of their own tickets.
    match /tickets/{ticketId} {
      allow read: if isOwner(resource.data.userId);
      allow list: if isOwner(request.query.userId); // Fix: Allows querying by user ID
    }
    
    // Transactions Collection
    // - No one should read transactions from the client-side.
    // - This is handled by server-side logic (Cloud Functions / Server Actions).
     match /transactions/{transactionId} {
      allow read, write: if false;
    }
  }
}
