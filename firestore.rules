rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow public read for approved events
    match /events/{eventId} {
      allow read: if resource.data.status == 'approved';
      // More specific create/update/delete rules needed for production
      allow write: if request.auth != null; 
    }
    
    // Ticket Tiers can be read if the parent event can be read
    match /events/{eventId}/ticketTiers/{tierId} {
      allow read: if get(/databases/$(database)/documents/events/$(eventId)).data.status == 'approved';
      allow write: if request.auth != null; // Should be restricted to event owner
    }

    match /users/{userId} {
      // Users can only read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /tickets/{ticketId} {
      // A user can GET a ticket if they are the owner.
      allow get: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // A user can LIST (query) tickets only if they are querying for their own tickets.
      // This is the critical rule that fixes the "My Tickets" page.
      allow list: if request.auth != null && request.auth.uid == request.query.filters.userId;

      // Creating tickets is handled by a server-side function, which has admin rights.
      // No client should be able to write directly to the tickets collection.
      allow create, update, delete: if false;
    }

    match /transactions/{transactionId} {
      // Only the user who made the transaction can read it.
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Creation is server-side only.
      allow create, update, delete: if false;
    }
  }
}